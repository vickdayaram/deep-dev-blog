{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/3-sum-closest/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Deep Dev"}},"markdownRemark":{"id":"ac79a0fe-1dec-51b6-a00d-b8ab83394640","excerpt":"Solving LeetCode 16. 3Sum Closest, with a two pointer approach. Click here and try it out your self! LeetCode Problem Statement Given an integer array nums of…","html":"<p>Solving LeetCode 16. 3Sum Closest, with a two pointer approach. <a href=\"https://leetcode.com/problems/3sum-closest/\">Click here</a> and try it out your self!</p>\n<h3>LeetCode Problem Statement</h3>\n<p>Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.</p>\n<p>Return the sum of the three integers.</p>\n<p>You may assume that each input would have exactly one solution.</p>\n<p>Examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\nInput: nums = [0,0,0], target = 1\nOutput: 0</code></pre></div>\n<p>This problem is interesting. What you are asked to is simple, and is easy to understand. Today we will work on building out a solution that runs in O(n^2) by using a two pointer approach.</p>\n<h3>The Algorithm Plan</h3>\n<p>The intentions of the machine, and how it will run…</p>\n<p>Execution</p>\n<ul>\n<li>Sort the array of numbers up front. Two pointer approach only works with a sorted set of numbers.</li>\n<li>Iterate through each value in the array until array.length - 2. This ensures we always have triplets and don’t have to deal with out of bound errors.</li>\n<li>For each iteration\n<ul>\n<li>Set up a left var equal to i + 1</li>\n<li>Set up a right var equal to array.length - 1</li>\n<li>Set up a while loop, while left &#x3C; right\n<ul>\n<li>Calculate current sum</li>\n<li>Run checks\n<ul>\n<li>If we found a better answer, update ClosestSum\n<ul>\n<li>Use Math.abs, remember there could be negative numbers</li>\n</ul>\n</li>\n<li>If sum is greater than target, decrement right to find a better answer</li>\n<li>If sum is less than target, increment left to find a better answer</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Variables</p>\n<ul>\n<li>ClosestSum: Global Variable to keep track of the best answer. We will return this at the end. Initialize to Infinity</li>\n<li>Left Pointer, Right Pointer, CurrentSum, for each iteration of the loop.</li>\n</ul>\n<p>These are the steps that we need to execute for the algorithm.</p>\n<blockquote>\n<p>Special Note on Planning: Planning is an important step when writing code. The better you plan, the easier it will be to code the solution. So take extra time here, its a wise investment. It may seem slower at first, but it’s how you will become a wizard.</p>\n</blockquote>\n<p>Lets code it up!</p>\n<h3>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">threeSumClosest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">// Sort the array for two pointer approach</span>\n    nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> closestSum <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> currentSum <span class=\"token operator\">=</span> val <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> currentDiff <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> currentSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> closestDiff <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> closestSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentDiff <span class=\"token operator\">&lt;</span> closestDiff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                closestSum <span class=\"token operator\">=</span> currentSum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> currentSum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> closestSum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Summary</h3>\n<p>This Algorithm runs in O(n^2) time. O(n * log(n)) for the sort plus O(n^2) for the iteration, O(n * log(n) + n^2), which is asymptotically equivalent to O(n^2). Space complexity will be O(n) which is required for sorting.</p>\n<p>The two pointer approach pattern we used here can be used for a variety of other problems similar to this one. It’s a great one to have in your tool belt.</p>\n<p>Shout out to <a href=\"https://www.educative.io/learn\">educative.io</a>, specifically their course Grokking the coding interview: Pattern for coding questions. Their course has been tremendously helpful in my development when tackling these questions. Highly recommend them if you are looking to sharpen your skills.</p>\n<p>Hope you found this walk through helpful. If you take one thing away from this I hope it’s the planning piece. Take the time to plan. It’s a habit that will help you as an engineer, and life in general.</p>","frontmatter":{"title":"LeetCode 16. 3Sum Closest","date":"January 15, 2022","description":"3Sum Closest Problem"}},"previous":{"fields":{"slug":"/longest-repeating-character-replacement/"},"frontmatter":{"title":"LeetCode 424. Longest Repeating Character Replacement"}},"next":null},"pageContext":{"id":"ac79a0fe-1dec-51b6-a00d-b8ab83394640","previousPostId":"026e5bf6-e7eb-54cd-8c5b-b5004cc5f586","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}