{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/longest-repeating-character-replacement/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Deep Dev"}},"markdownRemark":{"id":"026e5bf6-e7eb-54cd-8c5b-b5004cc5f586","excerpt":"Solving LeetCode 424. Longest Repeating Character Replacement, with a Sliding Window approach. Click here to try it out your self! LeetCode Problem Statement…","html":"<p>Solving LeetCode 424. Longest Repeating Character Replacement, with a Sliding Window approach. <a href=\"https://leetcode.com/problems/longest-repeating-character-replacement/\">Click here</a> to try it out your self!</p>\n<h3>LeetCode Problem Statement</h3>\n<p>You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.</p>\n<p>Return the length of the longest substring containing the same letter you can get after performing the above operations</p>\n<p>Examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: s = \"ABAB\", k = 2\nOutput: 4\nExplanation: Replace the two 'A's with two 'B's or vice versa.\n\nInput: s = \"AABABBA\", k = 1\nOutput: 4\nExplanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.</code></pre></div>\n<p>This was a tough problem for me to wrap my head around. The key for me was getting a better insight into what I was looking for…</p>\n<h3>Working backwards, what does our solution look like?</h3>\n<p>We are looking for the longest substring that contains the same characters after substituting up to K times.</p>\n<p>In other words we are looking for a substring that contains the max alike letters plus K substitutions. So in any given window our answer should work out to be:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> solution <span class=\"token operator\">=</span> maxLetterCountInWindow <span class=\"token operator\">+</span> k</code></pre></div>\n<p>Where solution must be less than the length of the string.</p>\n<p>Example 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: s = \"ABAB\", k = 2\nOutput: 4\n\nwindow = {A: 2, B: 2} from index 0 to 3;\nmaxLetterCount = 2;\nk = 2;\n\nsolution = maxLetterCount + k\nsolution = 4</code></pre></div>\n<p>In the above example we can either have a window where the maxLetter is A, or B. In either case we can delete the other letter up to K times, which in this case is 2.</p>\n<p>Example 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: s = \"AABABBA\", k = 1\nOutput: 4\n\nSolution 1\nwindow = {A: 3, B: 1} from index 0 to 3\nmaxLetterCount = 3\nk = 1\n\nsolution = maxLetterCount + k\nsolution = 4\n\nSolution 2\nwindow = {A: 1, B: 3} fro index 2 to 5\nmaxLetterCount = 3\nk = 1\n\nsolution = maxLetterCount + k\nsolution = 4</code></pre></div>\n<p>Understanding this insight turned this hard problem into a manageable one. Let’s look at the code and see how we can apply this.</p>\n<h3>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findLengthOfLongestSubStringWithMaxDeletes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">let</span> maxLength <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> maxLetterCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">let</span> frequencyMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// for the given window</span>\n    <span class=\"token keyword\">let</span> windowStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> windowEnd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> windowEnd <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> windowEnd<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> rightChar <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>windowEnd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>frequencyMap<span class=\"token punctuation\">[</span>rightChar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            frequencyMap<span class=\"token punctuation\">[</span>rightChar<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Keep track of the char frequency in the currentWindow</span>\n        frequencyMap<span class=\"token punctuation\">[</span>rightChar<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Update the maxLetterCount for the window</span>\n        maxLetterCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxLetterCount<span class=\"token punctuation\">,</span> frequencyMap<span class=\"token punctuation\">[</span>rightChar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        \n        <span class=\"token comment\">// Validate the current window to make sure we satisfy the constraints </span>\n        <span class=\"token comment\">// If the currentLength - maxLetterCount > k </span>\n        <span class=\"token comment\">// shrink the window since we don't have substitutions left. </span>\n        <span class=\"token keyword\">const</span> currentLength <span class=\"token operator\">=</span> windowEnd <span class=\"token operator\">-</span> windowStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentLength <span class=\"token operator\">-</span> maxLetterCount<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> leftChar <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>windowStart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Remember to decrement the frequencyMap with the character </span>\n            <span class=\"token comment\">// that is going out of the window</span>\n            frequencyMap<span class=\"token punctuation\">[</span>leftChar<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            windowStart<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// Now we have a valid window, so check if we have </span>\n        <span class=\"token comment\">// found a better answer</span>\n        <span class=\"token keyword\">const</span> validLength <span class=\"token operator\">=</span> windowEnd <span class=\"token operator\">-</span> windowStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        maxLength <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>validLength<span class=\"token punctuation\">,</span> maxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> maxLength<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Summary</h3>\n<p>This algorithm runs in O(n) time and O(1) space. Given that we only have 26 letters in the english language, that’s a fixed space we would keep in the hashmap which is equivalent to O(1).</p>\n<p>I struggled when solving this problem. Understanding that the length of the substring would equal the maxNumberOfCharacters + k, was the key insight I needed to make a break through.</p>\n<p>Shout out to <a href=\"https://www.educative.io/learn\">educative.io</a>, specifically their course Grokking the coding interview: Pattern for coding questions. Their course has been tremendously helpful in my development when tackling these questions. Highly recommend them if you are looking to sharpen your skills here.</p>\n<p>Hope you found this helpful!</p>","frontmatter":{"title":"LeetCode 424. Longest Repeating Character Replacement","date":"January 08, 2022","description":"Solving LeetCode 424 with Sliding Window"}},"previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":null},"pageContext":{"id":"026e5bf6-e7eb-54cd-8c5b-b5004cc5f586","previousPostId":"fc99641d-b71a-5ad0-bb47-2ef32031a456","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}